{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["window","Buffer","TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","checkIfWalletIsConnected","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","gifList","setGifList","getProgram","Program","fetchIdl","getProvider","idl","getGifList","program","account","fetch","useEffect","inputValue","setInputValue","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","provider","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","sendGif","length","addGif","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","userAddress","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8bbb727.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport kp from './keypair.json'\nimport { Buffer } from \"buffer\";\nwindow.Buffer = Buffer;\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey(\"5Dvg1T4undoZxQKyUwUiDrkYqiEnFUwqDq18VmpGnbDa\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    // We're using optional chaining (question mark) to check if the object is null\n    if (window?.solana?.isPhantom) {\n      console.log('Phantom wallet found!');\n      /*\n      * The solana object gives us a function that will allow us to connect\n      * directly with the user's wallet\n      */\n      const response = await window.solana.connect({ onlyIfTrusted: true });\n      console.log(\n        'Connected with Public Key:',\n        response.publicKey.toString()\n      );\n      /*\n       * Set the user's publicKey in state to be used later!\n       */\n      setWalletAddress(response.publicKey.toString());\n    } else {\n      alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n    }\n  };\n\n  const connectWallet = async () => {};\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  \n  const [gifList, setGifList] = useState([]);\n  \n  const getProgram = async () => {\n    // Get metadata about your solana program\n    const idl = await Program.fetchIdl(programID, getProvider());\n    // Create a program that you can call\n    return new Program(idl, programID, getProvider());\n  };\n  \n  const getGifList = async() => {\n    try {\n      const program = await getProgram(); \n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n  \n  const [inputValue, setInputValue] = useState('');\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n  \n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      \n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider()\n      const program = await getProgram(); \n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                  <div className=\"sub-text\">{item.userAddress.toString()}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n    \n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">My GIFs</p>\n          <p className=\"sub-text\">\n            View your GIF collection\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}